{{>partial_header}}

using System.Diagnostics;
using System.Diagnostics.Metrics;

namespace {{packageName}}.Telemetry;

public class TelemetryHistograms {
    // Meters

    // The total request time for FGA requests
    private const string RequestDurationKey = "fga-client.request.duration";

    // The amount of time the FGA server took to internally process nd evaluate the request
    private const string QueryDurationKey = "fga-client.query.duration";

    protected Meter meter;
    public Histogram<float> queryDuration;
    public Histogram<float> requestDurationHistogram;

    public TelemetryHistograms(Meter meter) {
        this.meter = meter;
        requestDurationHistogram = this.meter.CreateHistogram<float>(RequestDurationKey,
            description: "The duration of requests", unit: "milliseconds");
        queryDuration = this.meter.CreateHistogram<float>(QueryDurationKey,
            description: "The duration of queries on the FGA server", unit: "milliseconds");
    }

    public void buildForResponse(HttpResponseMessage response, KeyValuePair<string, object>[] attributes,
        Stopwatch requestDuration) {
        if (response.Headers.Contains("fga-query-duration-ms")) {
            var durationHeader = response.Headers.GetValues("fga-query-duration-ms").ToString();
            if (!string.IsNullOrEmpty(durationHeader)) {
                var success = float.TryParse(durationHeader, out var durationFloat);
                if (success) {
                    queryDuration?.Record(durationFloat, attributes);
                }
            }
        }

        requestDurationHistogram.Record(requestDuration.ElapsedMilliseconds, attributes);
    }
}